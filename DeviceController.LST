C51 COMPILER V9.54   DEVICECONTROLLER                                                      03/18/2016 11:59:05 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE DEVICECONTROLLER
OBJECT MODULE PLACED IN DeviceController.OBJ
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE DeviceController.c OBJECTADVANCED OPTIMIZE(8,SPEED) BROWSE NOINTPROMOTE 
                    -DEFINE(STARTERKIT) DEBUG TABS(2)

line level    source

   1          #include "DeviceController.h"
   2          #include "PinDefine.h"
   3          #include "UART.h"
   4          #include "FlashUtils.h"
   5          #include <string.h>
   6          
   7          extern bool shouldMonitorHVStatus;
   8          void sendUUID() {
   9   1        char xdata uuidString[50];
  10   1        unsigned char code * currentFlashDataEndAddress = getFlashDataEndAddress();
  11   1        readFlashToBuffer(uuidString, 50, currentFlashDataEndAddress);
  12   1        sendUART("#f#");
  13   1        sendUART(uuidString);
  14   1        sendUART("#\r\n");
  15   1      }
  16          
  17          void enableLCChannel(char channelCode) {
  18   1        // Switch off all LC / LCR channel first.
  19   1        IO_vResetPin(LCR_CHANNEL_1);
  20   1        IO_vResetPin(LCR_CHANNEL_2);
  21   1        IO_vResetPin(LCR_CHANNEL_3);  
  22   1        IO_vResetPin(LC_CHANNEL_1);
  23   1        IO_vResetPin(LC_CHANNEL_2);
  24   1        IO_vResetPin(LC_CHANNEL_3);
  25   1        
  26   1        // Enable coressponding LCR channel GPIO
  27   1        switch(channelCode) {
  28   2          case '0':
  29   2            sendUART("#b#0#\r\n");
  30   2            break;
  31   2          case '1':
  32   2            IO_vSetPin(LC_CHANNEL_1);
  33   2            sendUART("#b#1#\r\n");
  34   2            break;
  35   2          case '2':
  36   2            IO_vSetPin(LC_CHANNEL_2);
  37   2            sendUART("#b#2#\r\n");    
  38   2            break;
  39   2          case '3':
  40   2            IO_vSetPin(LC_CHANNEL_3);
  41   2            sendUART("#b#3#\r\n");
  42   2            break;
  43   2          default:
  44   2            sendUART("Unknown LC Channel.\r\n");      
  45   2            break;
  46   2        }
  47   1      }
  48          
  49          void enableLCRChannel(char channelCode) {
  50   1        // Switch off all LC / LCR channel first.
  51   1        IO_vResetPin(LCR_CHANNEL_1);
  52   1        IO_vResetPin(LCR_CHANNEL_2);
  53   1        IO_vResetPin(LCR_CHANNEL_3);
  54   1        IO_vResetPin(LC_CHANNEL_1);
C51 COMPILER V9.54   DEVICECONTROLLER                                                      03/18/2016 11:59:05 PAGE 2   

  55   1        IO_vResetPin(LC_CHANNEL_2);
  56   1        IO_vResetPin(LC_CHANNEL_3);
  57   1        
  58   1        // Enable coressponding LCR channel GPIO
  59   1        switch(channelCode) {
  60   2          case '0':
  61   2            sendUART("#a#0#\r\n");
  62   2            break;
  63   2          case '1':
  64   2            IO_vSetPin(LCR_CHANNEL_1);
  65   2            sendUART("#a#1#\r\n");
  66   2            break;
  67   2          case '2':
  68   2            IO_vSetPin(LCR_CHANNEL_2);
  69   2            sendUART("#a#2#\r\n");    
  70   2            break;
  71   2          case '3':
  72   2            IO_vSetPin(LCR_CHANNEL_3);
  73   2            sendUART("#a#3#\r\n");
  74   2            break;
  75   2          default:
  76   2            sendUART("Unknown LCR Channel.\r\n");     
  77   2            break;
  78   2        }
  79   1      }
  80          
  81          bool isAllHVRelayOK() {
  82   1        #ifdef STARTER_KIT_EMU
                  return IO_ubReadPin(HV_READY_1);
                #else
  85   1          return 
  86   1            IO_ubReadPin(HV_READY_1) &&
  87   1            IO_ubReadPin(HV_READY_2) &&
  88   1            IO_ubReadPin(HV_READY_3) &&
  89   1            IO_ubReadPin(HV_FAULT_1) &&
  90   1            IO_ubReadPin(HV_FAULT_2) &&
  91   1            IO_ubReadPin(HV_FAULT_3);
  92   1        #endif
  93   1      }
  94          
  95          void sendHVRelayStatus() {
  96   1        if (isAllHVRelayOK()) {
  97   2          sendUART("HV_OK\r\n");
  98   2        } else {
  99   2          sendUART("HV_NG\r\n");    
 100   2        }
 101   1      }
 102          
 103          void setChargeMode(char modeCode) {
 104   1        if (modeCode == '1') {
 105   2          if (!isAllHVRelayOK()) {
 106   3            IO_vResetPin(HV_CHANNEL);     
 107   3            IO_vResetPin(CHARGE_CHANNEL);
 108   3            IO_vResetPin(DISCHARGE_CHANNEL);
 109   3            sendUART("HV_NG\r\n");
 110   3            return;
 111   3          }
 112   2          IO_vResetPin(DISCHARGE_CHANNEL);
 113   2          IO_vSetPin(HV_CHANNEL);
 114   2          IO_vSetPin(CHARGE_CHANNEL);
 115   2          sendUART("#c#1#\r\n");
 116   2        } else if (modeCode == '0') {
C51 COMPILER V9.54   DEVICECONTROLLER                                                      03/18/2016 11:59:05 PAGE 3   

 117   2          IO_vResetPin(CHARGE_CHANNEL);
 118   2          IO_vResetPin(HV_CHANNEL);
 119   2          IO_vSetPin(DISCHARGE_CHANNEL);
 120   2          sendUART("#c#0#\r\n");
 121   2        } else {
 122   2          sendUART("Unknown Charge Mode\r\n");    
 123   2        }
 124   1      }
 125          
 126          void setHVMonitorMode(char modeCode) {
 127   1        if (modeCode == '1') {
 128   2          shouldMonitorHVStatus = 1;
 129   2          sendUART("#e#1#\r\n");
 130   2        } else if (modeCode == '0') {
 131   2          shouldMonitorHVStatus = 0;
 132   2          sendUART("#e#0#\r\n");
 133   2        } else {
 134   2          sendUART("Unknown HV Monitor Code\r\n");
 135   2        }
 136   1        
 137   1      }
 138          
 139          void setUUID(char * command) {
 140   1        unsigned char code * flashEndAddress = getFlashDataEndAddress();  
 141   1        char xdata uuidString[37] = {0};
 142   1        strncpy(uuidString, command+3, 36);
 143   1        sendUART("Setting UUID to ");
 144   1        sendUART(uuidString);
 145   1        sendUART("....\r\n");
 146   1        sendUART("Please wait...");
 147   1        writeBufferToFlash(uuidString, &flashEndAddress);
 148   1        sendUART("DONE\r\n");
 149   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    557    ----
   CONSTANT SIZE    =    296    ----
   XDATA SIZE       =   ----      87
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
