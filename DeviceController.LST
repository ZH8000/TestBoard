C51 COMPILER V9.55   DEVICECONTROLLER                                                      05/18/2016 09:17:22 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE DEVICECONTROLLER
OBJECT MODULE PLACED IN DeviceController.OBJ
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE DeviceController.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include "DeviceController.h"
   2          #include "PinDefine.h"
   3          #include "UART.h"
   4          #include <string.h>
   5          
   6          #define PREDEFINED_UUID   "bfcf9428-eef6-4261-ae2e-e9d66c7e3d31"
   7          extern bool shouldMonitorHVStatus;
   8          
   9          
  10          void sendUUID() {
  11   1          sendUART("#f#");
  12   1          sendUART(PREDEFINED_UUID);
  13   1          sendUART("#\n");
  14   1      }
  15          
  16          void enableLCChannel(char channelCode) {
  17   1          // Switch off all LC / LCR channel first.
  18   1          IO_vResetPin(LCR_CHANNEL_1);
  19   1          IO_vResetPin(LCR_CHANNEL_2);
  20   1          IO_vResetPin(LCR_CHANNEL_3);    
  21   1          IO_vResetPin(LC_CHANNEL_1);
  22   1          IO_vResetPin(LC_CHANNEL_2);
  23   1          IO_vResetPin(LC_CHANNEL_3);
  24   1      
  25   1          // Enable coressponding LCR channel GPIO
  26   1          switch(channelCode) {
  27   2              case '0':
  28   2                  sendUART("#b#0#\n");
  29   2                  break;
  30   2              case '1':
  31   2                  IO_vSetPin(LC_CHANNEL_1);
  32   2                  sendUART("#b#1#\n");
  33   2                  break;
  34   2              case '2':
  35   2                  IO_vSetPin(LC_CHANNEL_2);
  36   2                  sendUART("#b#2#\n");            
  37   2                  break;
  38   2              case '3':
  39   2                  IO_vSetPin(LC_CHANNEL_3);
  40   2                  sendUART("#b#3#\n");
  41   2                  break;
  42   2              default:
  43   2                  sendUART("#Unknown LC Channel.#\n");                    
  44   2                  break;
  45   2          }
  46   1      }
  47          
  48          void enableLCRChannel(char channelCode) {
  49   1          // Switch off all LC / LCR channel first.
  50   1          IO_vResetPin(LCR_CHANNEL_1);
  51   1          IO_vResetPin(LCR_CHANNEL_2);
  52   1          IO_vResetPin(LCR_CHANNEL_3);
  53   1          IO_vResetPin(LC_CHANNEL_1);
  54   1          IO_vResetPin(LC_CHANNEL_2);
  55   1          IO_vResetPin(LC_CHANNEL_3);
C51 COMPILER V9.55   DEVICECONTROLLER                                                      05/18/2016 09:17:22 PAGE 2   

  56   1      
  57   1          // Enable coressponding LCR channel GPIO
  58   1          switch(channelCode) {
  59   2              case '0':
  60   2                  sendUART("#a#0#\n");
  61   2                  break;
  62   2              case '1':
  63   2                  IO_vSetPin(LCR_CHANNEL_1);
  64   2                  sendUART("#a#1#\n");
  65   2                  break;
  66   2              case '2':
  67   2                  IO_vSetPin(LCR_CHANNEL_2);
  68   2                  sendUART("#a#2#\n");            
  69   2                  break;
  70   2              case '3':
  71   2                  IO_vSetPin(LCR_CHANNEL_3);
  72   2                  sendUART("#a#3#\n");
  73   2                  break;
  74   2              default:
  75   2                  sendUART("#Unknown LCR Channel.#\n");                   
  76   2                  break;
  77   2          }
  78   1      }
  79          
  80          bool isAllHVRelayOK() {
  81   1      #ifdef STARTER_KIT_EMU
                  return IO_ubReadPin(HV_READY_1);
              #else
  84   1          return 
  85   1              IO_ubReadPin(HV_READY_1) &&
  86   1              IO_ubReadPin(HV_READY_2) &&
  87   1              IO_ubReadPin(HV_READY_3) &&
  88   1              IO_ubReadPin(HV_FAULT_1) &&
  89   1              IO_ubReadPin(HV_FAULT_2) &&
  90   1              IO_ubReadPin(HV_FAULT_3);
  91   1      #endif
  92   1      }
  93          
  94          void sendHVRelayStatus() {
  95   1          if (IO_ubReadPin(HV_READY_1)) {
  96   2              sendUART("HV_READY_1: OK\n");
  97   2          } else {
  98   2              sendUART("HV_READY_1: NG\n");
  99   2          }
 100   1      
 101   1          if (IO_ubReadPin(HV_READY_2)) {
 102   2              sendUART("HV_READY_2: OK\n");
 103   2          } else {
 104   2              sendUART("HV_READY_2: NG\n");
 105   2          }
 106   1      
 107   1          if (IO_ubReadPin(HV_READY_3)) {
 108   2              sendUART("HV_READY_3: OK\n");
 109   2          } else {
 110   2              sendUART("HV_READY_3: NG\n");
 111   2          }
 112   1      
 113   1          if (IO_ubReadPin(HV_FAULT_1)) {
 114   2              sendUART("HV_FAULT_1: OK\n");
 115   2          } else {
 116   2              sendUART("HV_FAULT_1: NG\n");
 117   2          }
C51 COMPILER V9.55   DEVICECONTROLLER                                                      05/18/2016 09:17:22 PAGE 3   

 118   1      
 119   1          if (IO_ubReadPin(HV_FAULT_2)) {
 120   2              sendUART("HV_FAULT_2: OK\n");
 121   2          } else {
 122   2              sendUART("HV_FAULT_2: NG\n");
 123   2          }
 124   1      
 125   1          if (IO_ubReadPin(HV_FAULT_3)) {
 126   2              sendUART("HV_FAULT_3: OK\n");
 127   2          } else {
 128   2              sendUART("HV_FAULT_3: NG\n");
 129   2          }
 130   1      
 131   1      
 132   1          if (isAllHVRelayOK()) {
 133   2              sendUART("#d#1#\n");
 134   2          } else {
 135   2              sendUART("#d#0#\n");            
 136   2          }
 137   1      }
 138          
 139          void setChargeMode(char modeCode) {
 140   1          if (modeCode == '0') {
 141   2              IO_vResetPin(HV_CHANNEL);               
 142   2              IO_vSetPin(DISCHARGE_CHANNEL);
 143   2              IO_vSetPin(CHARGE_CHANNEL);
 144   2              sendUART("#c#0#\n");            
 145   2          } else if (modeCode == '1') {
 146   2              if (!isAllHVRelayOK()) {
 147   3                  IO_vResetPin(HV_CHANNEL);                       
 148   3                  IO_vSetPin(CHARGE_CHANNEL);
 149   3                  IO_vSetPin(DISCHARGE_CHANNEL);
 150   3                  sendUART("#d#0#\n");
 151   3                  return;
 152   3              }
 153   2              IO_vSetPin(DISCHARGE_CHANNEL);
 154   2              IO_vSetPin(HV_CHANNEL);
 155   2              IO_vResetPin(CHARGE_CHANNEL);
 156   2              sendUART("#c#1#\n");
 157   2          } else if (modeCode == '2') {
 158   2              IO_vSetPin(CHARGE_CHANNEL);
 159   2              IO_vResetPin(HV_CHANNEL);
 160   2              IO_vResetPin(DISCHARGE_CHANNEL);
 161   2              sendUART("#c#2#\n");
 162   2          } else {
 163   2              sendUART("#Unknown Charge Mode#\n");            
 164   2          }
 165   1      }
 166          
 167          void setHVMonitorMode(char modeCode) {
 168   1          if (modeCode == '1') {
 169   2              shouldMonitorHVStatus = 1;
 170   2              sendUART("#e#1#\n");
 171   2          } else if (modeCode == '0') {
 172   2              shouldMonitorHVStatus = 0;
 173   2              sendUART("#e#0#\n");
 174   2          } else {
 175   2              sendUART("#Unknown HV Monitor Code#\n");
 176   2          }
 177   1      
 178   1      }

C51 COMPILER V9.55   DEVICECONTROLLER                                                      05/18/2016 09:17:22 PAGE 4   


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    460    ----
   CONSTANT SIZE    =    438    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
