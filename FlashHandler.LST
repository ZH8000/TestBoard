C51 COMPILER V9.54   FLASHHANDLER                                                          03/18/2016 11:02:42 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE FLASHHANDLER
OBJECT MODULE PLACED IN FlashHandler.OBJ
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE FlashHandler.c OBJECTADVANCED OPTIMIZE(8,SPEED) BROWSE NOINTPROMOTE DEFI
                    -NE(STARTERKIT) DEBUG TABS(2)

line level    source

   1          /*********************************************************************************************************
             -*
   2          **  Flashhandler.c    XC866BB and higher, XC88x, XC878
   3          **  2008  Infineon Technologies     
   4          **********************************************************************************************************
             -/
   5          #include "FlashHandler.h"
   6          
   7          //     MACRO Definitions for absolute register access
   8          //----------------------------------------------------------------------
   9          #define REG   ((unsigned char volatile data *) 0) // Allow absolute access to registers R0 ... R7 
  10                                    // in all banks. 
  11          
  12          //     sfr16 operator declaration / definition
  13          //----------------------------------------------------------------------
  14          #ifdef  __C51__
  15          sfr16 DPTR = 0x82;
  16          #endif  // __C51__
  17          
  18          #ifdef  SDCC
              __sfr16 __at(((0x82+1U)<<8) | 0x82)  DPTR;      // just sfr16 check for SCC XC800
              #endif  // SDCC
  21          
  22          
  23          //     Intrinsic functions used in the handler for XC866 / XC88x
  24          //----------------------------------------------------------------------
  25          #ifndef XC878
  26          #ifdef  __C51__
  27          #define   PUSH(n)   _push_(n);
  28          #define   POP(n)    _pop_(n);
  29          #endif  // __C51__
  30          
  31          #ifdef  SDCC
              #define   PUSH(n)   { _asm PUSH  n _endasm; }
              #define   POP(n)    { _asm POP   n _endasm; }
              #endif  // SDCC
  35          #endif  // ifndef XC878
  36          
  37          
  38          //     GLOBAL Variable WLBuf and fix up for MagicMemory location
  39          //----------------------------------------------------------------------
  40          //       Fix MAGIC Memory and Wordlinebuffer addresses
  41          // Note: This could also be done with the linker/locator, 
  42          //       but is easier this way for unexperienced users
  43          #ifndef XC878
  44          #ifdef  SDCC            
              unsigned char idata __at  (WORDLINE_BUFFER_ADDRESS) WLBuf[BYTES_PER_WORDLINE];
              unsigned char data  __at  (MAGIC_MEMORY)        MagicMemory[RESERVED_BYTES];
              #endif  // SDCC
  48          
  49          #ifdef  __C51__
  50          unsigned char idata     WLBuf[BYTES_PER_WORDLINE]   _at_ WORDLINE_BUFFER_ADDRESS;
  51          unsigned char data      MagicMemory[RESERVED_BYTES] _at_ MAGIC_MEMORY;
  52          #endif  // __C51__ 
C51 COMPILER V9.54   FLASHHANDLER                                                          03/18/2016 11:02:42 PAGE 2   

  53          #endif  // ifndef XC878
  54          
  55          
  56          
  57          #ifdef  XC878
              #ifdef  SDCC            
              unsigned char xdata __at  (XRAM_BUFFER_ADDR)      WLBuf[BYTES_PER_WORDLINE];
              unsigned char data  __at  (MAGIC_MEMORY)        MagicMemory[RESERVED_BYTES];
              #endif  // SDCC
              #ifdef  __C51__
              unsigned char xdata     WLBuf[BYTES_PER_WORDLINE]   _at_ XRAM_BUFFER_ADDR;
              unsigned char data      MagicMemory[RESERVED_BYTES] _at_ MAGIC_MEMORY;
              #endif  // __C51__ 
              #endif  // XC878
  67          
  68          //===============================================================================
  69          //                               HANDLER ROUTINES
  70          //===============================================================================
  71          //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  72          //     FLASH ERASE ABORT     XC866 / XC88x
  73          //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  74          #ifndef XC878
  75          bit FLASH_Erase_Abort (void)
  76          {
  77   1      #ifdef __C51__    
  78   1        ((void (code *) (void)) FLASH_ERASE_ABORT) ();
  79   1      #endif  // __C51__
  80   1      #ifdef  SDCC
              _asm
                LCALL FLASH_ERASE_ABORT;
              _endasm;
              #endif  // SDCC
  85   1        return (!CY);  
  86   1      }
  87          //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  88          //     FLASH Ready               XC866 / XC88x
  89          //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  90          bit FLASH_Ready           (unsigned char BankNum)
  91          {
  92   1          ACC = BankNum;
  93   1      #ifdef __C51__    
  94   1        ((void (code *) (void)) FLASH_READ_STATUS) ();
  95   1      #endif  // __C51__
  96   1      #ifdef  SDCC
              _asm
                LCALL FLASH_READ_STATUS;
              _endasm;
              #endif  // SDCC
 101   1        return(CY);
 102   1      }
 103          
 104          //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 105          //     FLASH Prog                XC866 / XC88x
 106          //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 107          //  With modification of this routine, we can save the intermediate 
 108          //  DPTR SAVING for the SDCC, due to the fact that WORDLINE Buffer Address 
 109          //  is known at compile time. It coud be fixed up here
 110          
 111          
 112          // FLAH_Prog ((unsigned char code*)WORDLINEADDR(117));      // How to call it ...
 113          bit FLASH_Prog          (unsigned char code* WLAddress) 
 114          {
C51 COMPILER V9.54   FLASHHANDLER                                                          03/18/2016 11:02:42 PAGE 3   

 115   1      #ifdef  XC88x
 116   1        volatile bit success;       // needed for CY flag saving of the BROM routine's result
 117   1      #endif  // XC88x
 118   1      #ifdef  XC866
              #define USE_BANK  3         // fix the used registerbank to 3 for XC866 devices
              #endif  // XC866
 121   1                        // For SDCC parameter is now already in DPTR
 122   1      #ifdef SDCC
                *WLAddress;           // avoid warning of 'unreferenced function argument
              #endif  // SDCC
 125   1      #ifdef __C51__
 126   1         DPTR = (unsigned int)WLAddress;
 127   1      #endif  // __C51__
 128   1      
 129   1         REG[(0+(USE_BANK*8))] = WORDLINE_BUFFER_ADDRESS;
 130   1      #ifdef  XC88x
 131   1        PUSH(PSW);
 132   1        PSW = ((USE_BANK)<<3);
 133   1      #endif  // XC88x
 134   1      
 135   1      #ifdef  __C51__   
 136   1        ((void (code *) (void)) FLASH_PROG) ();
 137   1      #endif  // __C51__
 138   1      #ifdef  SDCC
              _asm
                LCALL FLASH_PROG;
              _endasm;
              #endif  // SDCC
 143   1      
 144   1      #ifdef  XC88x
 145   1        success = CY;
 146   1        POP(PSW);
 147   1        return(!success);       
 148   1      #endif  // XC88x
 149   1      #ifdef  XC866
                return (!CY);
              #endif  // XC866
 152   1      }
 153          
 154          //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 155          //     FLASH Erase                XC866 / XC88x
 156          //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 157          #ifdef  XC866
              bit FLASH_Erase     (unsigned int DFlash0Sector)
              #endif  // XC866
 160          #ifdef  XC88x
 161          bit FLASH_Erase     (unsigned int DFlash0Sector,unsigned int DFlash1Sector)
 162          #endif  // XC88x
 163          {
 164   1      #ifdef  XC88x
 165   1          volatile bit success; 
 166   1      #endif  // XC88x
 167   1        t_unFLPARAM P1;
 168   1      #ifdef  XC88x
 169   1        t_unFLPARAM P2;
 170   1      #endif  // XC88x
 171   1      
 172   1      #ifdef  XC866
              #define USE_BANK  3               // fix the used registerbank to 3 for XC866 devices
              #endif  // XC866
 175   1      
 176   1        P1.UINT_Param = DFlash0Sector;
C51 COMPILER V9.54   FLASHHANDLER                                                          03/18/2016 11:02:42 PAGE 4   

 177   1      #ifdef  XC88x
 178   1        P2.UINT_Param = DFlash1Sector;
 179   1      #endif  // XC88x
 180   1        
 181   1      #ifdef  XC866
                REG[(4+(USE_BANK*8))] = P1.UBYTE_Param[0];  // DFLASH0 Sector - BANK3 - High Adr Byte
                REG[(3+(USE_BANK*8))] = P1.UBYTE_Param[1];  // DFLASH0 Sector - BANK3 - Low  Adr Byte
              #endif  // XC866
 185   1      #ifdef  XC88x
 186   1        REG[(1+(USE_BANK*8))] = P1.UBYTE_Param[0];  // DFLASH0 Sector -         High Adr Byte
 187   1        REG[(0+(USE_BANK*8))] = P1.UBYTE_Param[1];  // DFLASH0 Sector -         Low  Adr Byte
 188   1        REG[(4+(USE_BANK*8))] = P2.UBYTE_Param[0];  // DFLASH1 Sector  
 189   1        REG[(3+(USE_BANK*8))] = P2.UBYTE_Param[1];  // DFLASH1 Sector  
 190   1      #endif  // XC88x
 191   1        REG[(5+(USE_BANK*8))] = 0;          // PFLASH  
 192   1        REG[(6+(USE_BANK*8))] = 0;          // PFLASH  
 193   1        REG[(7+(USE_BANK*8))] = 0;          // PFLASH  
 194   1      
 195   1      #ifdef XC88x
 196   1        PUSH(PSW);
 197   1        PSW = ((USE_BANK)<<3);
 198   1      #endif  // XC88x
 199   1      
 200   1      #ifdef  __C51__
 201   1        ((void (code *) (void)) FLASH_ERASE) ();
 202   1      #endif  // __C51__
 203   1      #ifdef  SDCC
              _asm
                LCALL FLASH_ERASE;
              _endasm;
              #endif  // SDCC
 208   1      
 209   1      #ifdef  XC866
                return(!CY);
              #endif  // XC866
 212   1      #ifdef  XC88x
 213   1        success = CY;
 214   1        POP(PSW);
 215   1        return (!success);
 216   1      #endif  // XC88x
 217   1      }
 218          #endif // ifndef XC878
 219          
 220          
 221          //---------------------------------------- XC878 ---------------------------------------------------------
             ----
 222          //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 223          //     FLASH Erase                XC878
 224          //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 225          #ifdef  XC878
              void InitMemExtension (void)              // should be called once before using FLASH routines!
              {
              #ifdef  K64   
                    MEX1 = 0x00;                  // NextBank 0 / Current Bank 0 
                  MEX2 = 0x80;                  // Ensure that all MOVC command are using Bank 0 
                  MEX3 = 0x1F;                  // Ensure all MOVX access XRAM Bank F     
              #endif
              #ifdef  K52               
                    MEX1 = 0x00;                  // NextBank 0 / Current Bank 0  
                  MEX2 = 0x00;                  // Ensure that all MOVC command are using Bank 0 
                  MEX3 = 0x00;                  // Ensure all MOVX access XRAM Bank 0   
                                          // MEX1 seems to be overwritten, if debugger is active ( KEIL V8.12c ) 
C51 COMPILER V9.54   FLASHHANDLER                                                          03/18/2016 11:02:42 PAGE 5   

              #endif
              }
              
              //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              //     FLASH Erase                XC878
              //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              bit FLASH_Erase (unsigned char code* FlashDstAddr,unsigned char KindOfErase)
              {
                volatile bit tmpEA, success;            // bit tmpEA --> overwrites CY ( in KEIL )
                                          // that's why use second var
              
                (EA)?(tmpEA = 1,EA=0):(tmpEA = 0);          // save EA bit for restoring at end
                                          // required by UM
                 ACC = KindOfErase;                 // desire MASS or PAGE erase 
              
                DPTR = (unsigned int) FlashDstAddr;
              
              #ifdef  K64
                MEX1 = 0x02;
              #endif  // K64
              #ifdef  __C51__
                ((void (code *) (void)) FLASH_ERASE) ();      // BROM call KEIL
              #endif  // __C51__
              #ifdef  SDCC
              _asm
                LCALL FLASH_ERASE;                  // BROM call SDCC
              _endasm;
              #endif  // SDCC
              #ifdef  K64
                MEX1 = 0x00;
              #endif  // K64
                success = CY;
                EA = tmpEA;                     // restore old EA state either '0' or '1' 
                return(!success);
              }
              
              //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              //     FLASH Prog                XC878
              //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              bit FLASH_Prog (unsigned char code * DestWordLine, unsigned char NrOfBytes) 
              {
                volatile bit tmpEA, success;            // bit tmpEA --> overwrites CY ( in KEIL )
                                          // that's why use second var
              
                (EA)?(tmpEA = 1,EA=0):(tmpEA = 0);          // save EA bit for restoring at end
                                          // required by UM
              
              #ifdef  K64
                MEX1 = 0x02;
              #endif  // K64
              
                REG[0x0001] = NrOfBytes;              // Number of bytes to be programmed - max. 32 DFLASH
              
                EO |= 0x01;                     // select DPTR1 to hold Buffer Address
                DPTR = (unsigned int)XRAM_BUFFER_ADDR;
                EO &= ~(0x01);                    // ensure DPTR0 is set as active before leave
              
                DPTR = (unsigned int)DestWordLine;
              
              #ifdef  __C51__ 
                ((void (code *) (void)) FLASH_PROG) ();       // BROM call KEIL
              #endif  // __C51__
C51 COMPILER V9.54   FLASHHANDLER                                                          03/18/2016 11:02:42 PAGE 6   

              #ifdef  SDCC
              _asm
                LCALL FLASH_PROG;                 // BROM call SDCC
              _endasm;
              #endif  // SDCC
              
              #ifdef  K64
                MEX1 = 0x00;
              #endif  // K64
                success = CY;
                EA = tmpEA;                     // restore old EA state either '0' or '1' 
                return(!success);
              }
              #endif  // XC878
 314          
 315          
 316          
 317          
 318          
 319          
 320          
 321          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     80    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
