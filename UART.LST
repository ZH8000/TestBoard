C51 COMPILER V9.55   UART                                                                  05/18/2016 09:17:22 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN UART.OBJ
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE UART.C OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          //****************************************************************************
   2          // @Module        UART (Serial Interface)
   3          // @Filename      UART.C
   4          // @Project       TestBoard.dav
   5          //----------------------------------------------------------------------------
   6          // @Controller    Infineon XC888CLM-8FF
   7          //
   8          // @Compiler      Keil
   9          //
  10          // @Codegenerator 1.7
  11          //
  12          // @Description:  This file contains functions that use the UART module.
  13          //
  14          //----------------------------------------------------------------------------
  15          // @Date          2016/3/15 16:17:36
  16          //
  17          //****************************************************************************
  18          
  19          
  20          //****************************************************************************
  21          // @Project Includes
  22          //****************************************************************************
  23          
  24          #include "MAIN.H"
  25          #include "PinDefine.h"
  26          #include "DeviceController.h"
  27          #include <string.h>
  28          #include <stdio.h>
  29          
  30          #define MAX_COMMAND_LENGTH              20
  31          
  32          
  33          
  34          //****************************************************************************
  35          // @Function      void UART_vInit(void) 
  36          //
  37          //----------------------------------------------------------------------------
  38          // @Description   This is the initialization function of the UART function 
  39          //                library. It is assumed that the SFRs used by this library 
  40          //                are in their reset state. 
  41          //                
  42          //                The following SFR fields will be initialized:
  43          //                - register SCON
  44          //                - bits SMOD and ES
  45          //
  46          //----------------------------------------------------------------------------
  47          // @Returnvalue   None
  48          //
  49          //----------------------------------------------------------------------------
  50          // @Parameters    None
  51          //
  52          //----------------------------------------------------------------------------
  53          // @Date          2016/3/15
  54          //
  55          //****************************************************************************
C51 COMPILER V9.55   UART                                                                  05/18/2016 09:17:22 PAGE 2   

  56          
  57          
  58          void UART_vInit(void)
  59          {
  60   1          ///  -----------------------------------------------------------------------
  61   1          ///  UART settings
  62   1          ///  -----------------------------------------------------------------------
  63   1          ///  Pin TXD_1 (P0.2) is selected for transmission
  64   1          ///  Pin RXD_1 (P0.1) is selected for reception
  65   1          ///  Receiver enabled
  66   1          ///  Mode 1: 8-bit data, 1 start bit, 1 stop bit, variable baud rate
  67   1          ///  Receiver interrupt flag RI will only be activated if a valid stop bit 
  68   1          ///  was received
  69   1          ///  BRG is selected for baudrate generation
  70   1      
  71   1          SFR_PAGE(_pp2, noSST);         // switch to page 2 without saving
  72   1          P0_ALTSEL0   &= ~(ubyte)0x04;  // configure alternate function register 0
  73   1          P0_ALTSEL1   |=  (ubyte)0x04;  // configure alternate function register 1
  74   1          SFR_PAGE(_pp0, noSST);         // switch to page 0 without saving
  75   1          P0_DIR       |=  (ubyte)0x04;  // set output direction
  76   1      
  77   1      
  78   1          MODPISEL     |=  (ubyte)0x01;  // configure peripheral input select register
  79   1          BCON          =  0x00;         // reset baudrate timer/reload register
  80   1          SCON          =  0x70;         // load serial channel control register
  81   1      
  82   1          ///  -----------------------------------------------------------------------
  83   1          ///  Baudrate generator settings
  84   1          ///  -----------------------------------------------------------------------
  85   1          ///  input clock = fPCLK
  86   1          ///  Fractional divider is enabled
  87   1          ///  baudrate = 9.6004 kbaud
  88   1      
  89   1          FDSTEP        =  0xD5;         // load fractional divider reload register
  90   1          BG            =  0x81;         // load baudrate timer/reload register
  91   1          FDCON        |=  0x01;         // load Fractional Divider control register
  92   1          BCON         |=  0x01;         // load baud rate control register
  93   1      
  94   1          ///  UART interrupt enabled
  95   1          ES = 1;
  96   1      
  97   1      } //  End of function UART_vInit
  98          
  99          
 100          //****************************************************************************
 101          // @Function      void UART_viIsr(void) 
 102          //
 103          //----------------------------------------------------------------------------
 104          // @Description   This is the service routine for the UART interrupt. It is 
 105          //                called after each transmission (flag TI set) or reception 
 106          //                (flag RI set) of a data unit.
 107          //                Please note that you have to add application specific code 
 108          //                to this function.
 109          //
 110          //----------------------------------------------------------------------------
 111          // @Returnvalue   None
 112          //
 113          //----------------------------------------------------------------------------
 114          // @Parameters    None
 115          //
 116          //----------------------------------------------------------------------------
 117          // @Date          2016/3/15
C51 COMPILER V9.55   UART                                                                  05/18/2016 09:17:22 PAGE 3   

 118          //
 119          //****************************************************************************
 120          
 121          //   You have two choices for interrupt type select in Project Settings Page 
 122          //   under Global Settings Section.
 123          //   If you select CHOICE 1 then ISR will be generated with push and pop.
 124          //   If you select CHOICE 2 then ISR will be generated without push and pop.
 125          //   Default choice is CHOICE 2.
 126          //   Current selection is CHOICE 2 
 127          
 128          static char receiveBuffer[MAX_COMMAND_LENGTH] = {0};
 129          static int bufferCount = 0;
 130          
 131          void sendUART(char * message) {
 132   1          char * current = message;
 133   1          while (*current != '\0') {
 134   2              SBUF = *current;
 135   2              while (TI == 0);
 136   2              TI = 0;         
 137   2              current++;
 138   2          }
 139   1      }
 140          
 141          void processCommand(char * command) {
 142   1      
 143   1          int commandSize = strlen(command);
 144   1          bool isNormalCommand = commandSize == 5 && command[0] == '$' && command[2] == '$' && command[4] == '$'
             -;
 145   1      
 146   1          if (isNormalCommand) {
 147   2              switch(command[1]) {
 148   3                  case 'a':
 149   3                      enableLCRChannel(command[3]);
 150   3                      break;
 151   3                  case 'b':
 152   3                      enableLCChannel(command[3]);
 153   3                      break;
 154   3                  case 'c':
 155   3                      setChargeMode(command[3]);
 156   3                      break;
 157   3                  case 'd':
 158   3                      sendHVRelayStatus();
 159   3                      break;
 160   3                  case 'e':
 161   3                      setHVMonitorMode(command[3]);
 162   3                      break;
 163   3                  case 'f':
 164   3                      sendUUID();
 165   3                      break;
 166   3                  default:
 167   3                      sendUART("Unknown Command1\r\n");
 168   3                      sendUART(command);
 169   3              }               
 170   2          } else {
 171   2              sendUART("AAAorrect Command Format\r\n");               
 172   2          }
 173   1      }
 174          
 175          void UART_viIsr(void) interrupt UARTINT
 176          {
 177   1          // switch to page 0
 178   1          SFR_PAGE(_su0, SST0);
C51 COMPILER V9.55   UART                                                                  05/18/2016 09:17:22 PAGE 4   

 179   1          if (TI)
 180   1          {
 181   2              TI = 0;
 182   2          }
 183   1          if (RI)
 184   1          {
 185   2              char receiveByte = SBUF;
 186   2              if (receiveByte == '\r' || receiveByte == '\n' || bufferCount >= MAX_COMMAND_LENGTH-1) {
 187   3                  processCommand(receiveBuffer);
 188   3                  memset(receiveBuffer, 0, MAX_COMMAND_LENGTH);                   
 189   3                  bufferCount = 0;
 190   3              } else {
 191   3                  receiveBuffer[bufferCount] = receiveByte;
 192   3                  bufferCount++;
 193   3              }
 194   2              RI = 0;
 195   2          }
 196   1      
 197   1          // restore the old page
 198   1          SFR_PAGE(_su0, RST0);
 199   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    384    ----
   CONSTANT SIZE    =     46    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     22       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
